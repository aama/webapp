(ns webapp.core
 (:refer-clojure :exclude [filter concat group-by max min count])
  (:require [compojure.core :refer :all]
            [compojure.handler :as handler]
            [compojure.route :as route]
            [clj-http.client :as http]
            [boutros.matsu.sparql :refer :all]
            [boutros.matsu.core :refer [register-namespaces]]
            [clojure.tools.logging :as log])
  (:use [hiccup.page :only [html5]]
            ))

;; local aama sparql query endpoint
(def aama "http://localhost:3030/aama/query")

;; some common prefixes
(register-namespaces {:rdfs "<http://www.w3.org/2000/01/rdf-schema#>"
                      :aama "<http://id.oi.uchicago.edu/aama/2013/>"
                      :aamas "<http://id.oi.uchicago.edu/aama/2013/schema/>"
                      :aamag "<http://oi.uchicago.edu/aama/2013/graph/>"
                      :bar "<http://id.oi.uchicago.edu/aama/2013/beja-arteiga/>"})

;; Query generated by qstring-fv-pname2query.pl
;; from input: Beja-arteiga,Prefix,Affirmative,CCY,Aorist
;;PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
;;PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
;;PREFIX aama: <http://id.oi.uchicago.edu/aama/2013/>
;;PREFIX aamas: <http://id.oi.uchicago.edu/aama/2013/schema/>
;;PREFIX aamag: <http://oi.uchicago.edu/aama/2013/graph/>
;;PREFIX bar: <http://id.oi.uchicago.edu/aama/2013/beja-arteiga/>
;;SELECT ?lex ?num ?pers ?gen ?token
;;WHERE
;;{
;;   {
;;      GRAPH aamag:beja-arteiga
;;      {
;;	?s bar:pos bar:Verb .
;;	?s aamas:lang aama:Beja-arteiga .
;;	?s aamas:lang ?lang .
;;	?lang rdfs:label ?langLabel .
;;	?s ?QPrefix bar:Prefix.
;;	?QPrefix rdfs:label ?Prefix .
;;	?s ?QAffirmative bar:Affirmative.
;;	?QAffirmative rdfs:label ?Affirmative .
;;	?s ?QCCY bar:CCY.
;;	?QCCY rdfs:label ?CCY .
;;	?s ?QAorist bar:Aorist .
;;	?QAorist rdfs:label ?Aorist .
;;	OPTIONAL { ?s aamas:lexeme ?lex . }
;;	OPTIONAL { ?s bar:number ?number .
;;		 ?number rdfs:label ?num . }
;;	{ ?s bar:pngShapeClass ?person .}
;;	  UNION
;;	{ ?s bar:person ?person .}
;;	?person rdfs:label ?pers .
;;	OPTIONAL { ?s bar:gender ?gender .
;;		 ?gender rdfs:label ?gen . }
;;	?s bar:token ?token .
;;      }
;;   }
;;}
;;ORDER BY ?lex DESC(?num) ?pers DESC(?gen)

;; matsu version
(defquery aama-qry []
(select :lex :num :pers :gen :token)
(where (graph [:aamag :beja-arteiga]
        :s [:bar :pos] [:bar :Verb]  \.
	:s [:aamas :lang] [:aama :Beja-arteiga]  \.
	:s [:aamas :lang] :lang  \.
	:lang [:rdfs :label] :langLabel  \.
	:s :QPrefix [:bar :Prefix] \.
	:QPrefix [:rdfs :label] :Prefix  \.
	:s :QAffirmative [:bar :Affirmative] \.
	:QAffirmative [:rdfs :label] :Affirmative  \.
	:s :QCCY [:bar :CCY] \.
	:QCCY [:rdfs :label] :CCY  \.
	:s :QAorist [:bar :Aorist]  \.
	:QAorist [:rdfs :label] :Aorist  \.
	(optional :s [:aamas :lexeme] :lex)  \. 
	(optional :s [:bar :number] :number)  \.
	(optional :number [:rdfs :label] :num)  \. 
	(union (group :s [:bar :pngShapeClass] :person)  
	       (group :s [:bar :person] :person))  \.
	:person [:rdfs :label] :pers  \.
	(optional :s [:bar :gender] :gender)  \.
	(optional :gender [:rdfs :label] :gen)  \. 
	:s [:bar :token] :token  \.))
(order-by :lex (desc :num) :pers (desc :gen)))

(defroutes app-routes
  (GET "/" []

       ;; demo clojurescript
       (html5
        [:body
         [:p#clickable "Click me!"] ;; clickable: see core.cljs
         [:script {:src "js/goog/base.js" :type "text/javascript"}]
         [:script {:src "js/webapp.js" :type "text"}]
         [:script {:type "text/javascript"}
          "goog.require('webapp.core');"]]))
  (GET "/sparql"
       []
       ;; send SPARQL over HTTP request
       (let [req (http/get aama
                           {:query-params
                            {"query" (aama-qry)
                             ;;"format" "application/sparql-results+json"}})]
                             "format" "text"}})]
         (log/info "sparql result status: " (:status req))
         (html5
          [:body
           [:h1#clickable "Result"] ;; clickable: see core.cljs
           [:pre (:body req)]
           [:script {:src "js/goog/base.js" :type "text/javascript"}]
           [:script {:src "js/webapp.js" :type "text/javascript"}]
           [:script {:type "text/javascript"}
            "goog.require('webapp.core');"]])))

  (route/resources "/")
  (route/not-found "Not Found"))

(def app
  (handler/site app-routes))
