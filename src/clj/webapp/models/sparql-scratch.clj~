                  (let [qval (clojure.string/replace val #"-" "")]
                  (if
                     (= val "lexeme")
                    (apply str
                     (tmpl/render-string
                      (str "
                 ?s aamas:{{val}} / rdfs:label ?{{val}} .  " )
                      {:val val}))
                       :qval qval})
                (if  (re-find #"token" val)
                   (apply str
                     (tmpl/render-string
                      (str "
	   ?s {{lpref}}:{{val}} / rdfs:label ?{{val}} .")
                      {:lpref lpref
                       :val val}))
                   (apply str
                     (tmpl/render-string
                      (str"
           ?s {{lpref}}:{{val}} ?{{val2}} .")
                      {:lpref lpref
                       :val val
                       :val2 (clojure.string/replace val #"-" "")}))))




==========================



           (apply str
                  (tmpl/render-string
                   (str "
	  } 
	 } 
	} 
	ORDER BY {{selOrder}} ")
                   {:lpref lpref
                    :selOrder selOrder}))

============================

             (if  (re-find #"token" val)
               (apply str
                      (tmpl/render-string
                       (str "
	   ?s {{lpref}}:{{val}}  ?{{val2}} .")
                       {:lpref lpref
                        :val val
                        :val2 (clojure.string/replace val #"-" "")}))
               (apply str
                      (tmpl/render-string
                       (str"
           ?s {{lpref}}:{{val}} / rdfs:label  ?{{val}} .")
                       {:lpref lpref
                        :val val
                        :val2 (clojure.string/replace val #"-" "")}))))

===============================

(defn pdgmqry-sparql-comment [lvalcluster]
  (let [dataIDstr (str "/"" dataID "/"")]
    (str PREFIXES
         (tmpl/render-string
          (str "
          SELECT ?comment
          WHERE
          {
      	   ?s rdfs:label \"{{label}}\" ;
              rdfs:comment ?comment . } ")
          {:label dataID}))))

(defn pdgmqry-sparql-comment [lvalcluster]
  "Query to retrieve comment from the term-cluster satisfying lvalcluster"
  (let [lprefmap (read-string (slurp "pvlists/lprefs.clj"))
        ;; parse valcluster
        vals (split lvalcluster #"," 2)
        language (first vals)
        vcs (split (last vals) #"," 2)
        pos (first vcs)
        mvalsprops (split (last vcs) #"%" 2)
        mv (first mvalsprops)
        proplex (last mvalsprops)
        morphclass (first (split mv #"," 2))
        props (if (re-find #"," mv)
                (last (split mv #"," 2))
                "")
        valsLex (split proplex #":" 2)
        ;;valstr (first valsLex)
        lex (if (re-find #":" proplex)
              (last (split proplex #":" 2))
              "")
        lang (read-string (str ":" language))
        lpref (lang lprefmap)
        Language (capitalize language)
        ]
    (str PREFIXES

         ;; Handle initial section
         (tmpl/render-string 
          (str "
	PREFIX {{lpref}}:   <http://id.oi.uchicago.edu/aama/2013/{{language}}/> 
	SELECT DISTINCT ?comment 
	WHERE
        { 
	 { 
	  GRAPH aamag:{{language}}  
          { 
	   ?s {{lpref}}:pos {{lpref}}:{{pos}} .  
	   ?s aamas:lang aama:{{Language}} . 
	   ?s aamas:lang / rdfs:label ?langLabel .
           ?s ?QmorphClass {{lpref}}:{{morphclass}}. ")
          {:lpref lpref
           :pos pos
           :morphclass morphclass
           :language language
           :Language Language})

         ;; Handle props
         (if (re-find #"\w"  props)
           (apply str  
                  (for [prop (split props #",")]
                    (let [pv (split prop #"=")
                          property (first pv)
                          value (last pv)]
                      (if (re-find #"lexeme" property)
                        (let [lex (clojure.string/replace value #".*?:" "")]
                          (tmpl/render-string 
                           (str "
           ?s aamas:lexeme ?lexeme .
           ?lexeme rdfs:label \"{{lex}}\" .")
                           {:lex lex}))
                        (tmpl/render-string 
                         (str "
           ?s {{lpref}}:{{property}}  {{lpref}}:{{value}} .  ")
                         {:lpref lpref
                          :property property
                          :value value} ))))))
  
         ;; Handle comment
           (apply str
                      (tmpl/render-string
                       (str "
                 ?s aamas:memberOf ?pdgm .  
                 ?pdgm rdfs:comment ?comment . 
                  }
                 }
                }" )))
         );;str PREFIXES
    ))



        PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> 
	PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> 
	PREFIX aama: <http://id.oi.uchicago.edu/aama/2013/> 
	PREFIX aamas: <http://id.oi.uchicago.edu/aama/2013/schema/> 
	PREFIX aamag:	 <http://oi.uchicago.edu/aama/2013/graph/>
	PREFIX bva:   <http://id.oi.uchicago.edu/aama/2013/beja-van/> 
	SELECT DISTINCT ?comment
	WHERE
        { 
	 { 
	  GRAPH aamag:beja-van  
          { 
	   ?s bva:pos bva:Verb .  
	   ?s aamas:lang aama:Beja-van . 
           ?s ?QmorphClass bva:Finite. 
           ?s bva:conjClass  bva:Suffix .  
           ?s aamas:lexeme ?lexeme .
           ?lexeme rdfs:label "tam" .
           ?s bva:tam  bva:Potential .  
           ?s aamas:memberOf ?pdgm .
           ?pdgm rdfs:comment ?comment .
	  } 
	 } 
	} 
	 
