;; query from master branch
;; PREFIX  ex: <http://example.org/book>
;; PREFIX  dc: <http://purl.org/dc/elements/1.1/>
;; SELECT ?title ?author
;; WHERE
;;   { ?book dc:title ?title .
;;       ?book dc:creator ?author . }

;; (defquery books-qry []
;;  (select :title :author)
;;  (where :book [:dc :title] :title \;
;;         [:dc :creator] :author \. ))

====================================================
;; PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
;; PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
;; PREFIX aama: <http://oi.uchicago.edu/aama/schema/2013#>
;; SELECT DISTINCT ?g
;; WHERE
;; {
;;   GRAPH ?g  { }
;;  }

;; above works in fuseki, but following gives parse error in matsu
(defquery aama-qry []
 (select-distinct :g )
  (where (graph :g )))

;; instead, need to use 'raw' (display problems in html)
(defquery aama-qry []
 (select-distinct :g )
  (where (graph :g (raw "{ }"))))

=======================================================
 PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
 PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
 PREFIX aama: <http://oi.uchicago.edu/aama/schema/2013#>
 SELECT DISTINCT ?g
 WHERE
 {
   GRAPH ?g  {?s ?p ?o }
  }

;; following gives correct answer, but fails to display in html
;; because of "<,>"
(defquery aama-qry []
 (select-distinct :g )
  (where (graph :g 
               :s :p :o  )))
============================================

SELECT (COUNT(?s) AS ?sTotal)
WHERE
{
	?s ?p ?o
}

(defquery aama-qry []
(select [(count :s) :total])
(where :s :p :o))

===================================================

#Query generated by qstring-fv-pname2query.pl
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX aama: <http://id.oi.uchicago.edu/aama/2013/>
PREFIX aamas: <http://id.oi.uchicago.edu/aama/2013/schema/>
PREFIX aamag: <http://oi.uchicago.edu/aama/2013/graph/>
PREFIX bar: <http://id.oi.uchicago.edu/aama/2013/beja-arteiga/>
SELECT ?lex ?num ?pers ?gen ?token
WHERE
{
   {
      GRAPH aamag:beja-arteiga
      {
	?s bar:pos bar:Verb .
	?s aamas:lang aama:Beja-arteiga .
	?s aamas:lang ?lang .
	?lang rdfs:label ?langLabel .
	?s ?QPrefix bar:Prefix.
	?QPrefix rdfs:label ?Prefix .
	?s ?QAffirmative bar:Affirmative.
	?QAffirmative rdfs:label ?Affirmative .
	?s ?QCCY bar:CCY.
	?QCCY rdfs:label ?CCY .
	?s ?QAorist bar:Aorist .
	?QAorist rdfs:label ?Aorist .
	OPTIONAL { ?s aamas:lexeme ?lex . }
	OPTIONAL { ?s bar:number ?number .
		 ?number rdfs:label ?num . }
	{ ?s bar:pngShapeClass ?person .}
	  UNION
	{ ?s bar:person ?person .}
	?person rdfs:label ?pers .
	OPTIONAL { ?s bar:gender ?gender .
		 ?gender rdfs:label ?gen . }
	?s bar:token ?token .
      }
   }
}
ORDER BY ?lex DESC(?num) ?pers DESC(?gen)

;; matsu version
(defquery aama-qry []
(select :lex :num :pers :gen :token)
(where (graph [:aamag :beja-arteiga]
        :s [:bar :pos] [:bar :Verb]  \.
	:s [:aamas :lang] [:aama :Beja-arteiga]  \.
	:s [:aamas :lang] :lang  \.
	:lang [:rdfs :label] :langLabel  \.
	:s :QPrefix [:bar :Prefix] \.
	:QPrefix [:rdfs :label] :Prefix  \.
	:s :QAffirmative [:bar :Affirmative] \.
	:QAffirmative [:rdfs :label] :Affirmative  \.
	:s :QCCY [:bar :CCY] \.
	:QCCY [:rdfs :label] :CCY  \.
	:s :QAorist [:bar :Aorist]  \.
	:QAorist [:rdfs :label] :Aorist  \.
	(optional :s [:aamas :lexeme] :lex)  \. 
	(optional :s [:bar :number] :number)  \.
	(optional :number [:rdfs :label] :num)  \. 
	(union (group :s [:bar :pngShapeClass] :person)  
	       (group :s [:bar :person] :person))  \.
	:person [:rdfs :label] :pers  \.
	(optional :s [:bar :gender] :gender)  \.
	(optional :gender [:rdfs :label] :gen)  \. 
	:s [:bar :token] :token  \.
(order-by :lex (desc :num) :pers (desc :gen)))))


